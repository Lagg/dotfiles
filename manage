#!/bin/sh

CMD_LS="ls"
CMD_SYNC="sync"
CMD_ADD="add"
CMD_RM="rm"
CMD_COLORTEST="color-check"

CMDS=($CMD_LS $CMD_SYNC $CMD_ADD $CMD_RM $CMD_COLORTEST)

SYNC_EXCLUDE="^README.md$\|^$(basename $0)$"

argv=($@)
cmd=$0
subcmd="${argv[0]}"

if test -z $cmd; then cmd="null"; fi
if test -z $subcmd; then subcmd="null"; fi

function add_tracked_file() {
    file=$1
    if test ! -e $file; then
	echoe "$file: No such file" && return 1;
    else
	trackedFile=./$(basename $file)

        # NOTE: DESTRUCTIVE
        mv -v $(realpath $file) $trackedFile
        git add --verbose $trackedFile
    fi
}

function clean_orphaned_symlinks() {
    # This is some arcane looking shit
    # but it's mostly implicitly telling find
    # to return broken symlinks (because it only
    # recognizes it's a symlink if it's broken with -L enabled)

    echoe -e "Cleaning orphaned dotfiles...\n"

    for brokenLink in $(find -L ~ -type l); do
        brokenPath=$(realpath -m $brokenLink)

        # Make doubly sure it's broken and only mess with our own broken stuff
        if ! test -e $brokenLink && test $(dirname $brokenPath) = $(pwd); then
            echoe "$brokenLink ($brokenPath) is orphan"
            # NOTE: DESTRUCTIVE
            rm -v $brokenLink
        fi
    done

    echoe
}

function symlink_tracked_files() {
    echoe -e "Symlinking managed dotfiles\n"

    for file in $(get_tracked_files); do
	linkname=~/$(basename $file)

	if test -z $linkname; then echoe "Bad linkname" && exit 1; fi

	test -e $linkname
	looseTest=$?

	test -e $linkname -a $(realpath $linkname) = $(realpath $file)
	managedTest=$?

	test -e $linkname -a ! -L $linkname
	unmanagedTest=$?

	if test $managedTest -eq 0;
	    then echoe "$linkname: Managed";
	elif test $unmanagedTest -eq 0;
	    then echoe "$linkname: Exists but not managed";
	elif test $looseTest -eq 0;
	    then echoe "$linkname: Exists as loose file";
	else
            # NOTE: DESTRUCTIVE
            ln -s -v $(realpath $file) $linkname
	fi
    done

    echoe
}

function untrack_file() {
    file=./$1

    # NOTE: DESTRUCTIVE
    mv -v $file ~ &&
    git rm -rf $file
}

function get_tracked_files() {
    # Skip manage script and project stuff
    git ls-files|grep -v $SYNC_EXCLUDE
}

function filter_untracked_files() {
    trackedFiles=$(get_tracked_files)
    args=$@
    toRemove=${args[@]}

    for file in $toRemove; do
	validRemove=""

	for trackedFile in $trackedFiles; do
	    if test $file == $trackedFile; then
		validRemove=$file
		break
	    fi
	done

	if test -z $validRemove; then
	    echoe "$file: Not tracked" && return 1;
	else
	    echo $validRemove
	fi
    done
}

function echoe() {
    echo $@ > /dev/stderr
}

function commit_reminder() {
    echoe "Needs git commit"
}

function truecolor_test() {
    # From https://gist.github.com/XVilka/8346728
    echoe -e "Truecolor test\n------\n"

    awk -v term_cols="${width:-$(tput cols || echo 80)}" 'BEGIN{
    s="/\\";
    for (colnum = 0; colnum<term_cols; colnum++) {
	r = 255-(colnum*255/term_cols);
	g = (colnum*510/term_cols);
	b = (colnum*255/term_cols);
	if (g>255) g = 510-g;
	    printf "\033[48;2;%d;%d;%dm", r,g,b;
	    printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
	    printf "%s\033[0m", substr(s,colnum%2+1,1);
	}
    printf "\n";
    }'

    echo -en "\x1b[0m"
}

function bytecolor_test() {
    # From https://gist.github.com/HaleTom/89ffe32783f89f403bba96bd7bcd1263
    # Modified by Lagg to not be so awkward about the nibblerow
    echoe -e "Bytecolor test\n------\n"

    for i in {0..255} ; do
        if (($i % 16 == 0)); then echo; fi
        printf "\x1b[38;5;${i}m%03d " "${i}"
    done
    echo -e "\x1b[0m"
}

function codecolor_test() {
    # From Lagg
    echoe -e "Codecolor test\n------\n"

    # Foreground
    for i in {30..37}; do
        printf "\x1b[${i}m%03d " "$i"
    done
    echo -e "\x1b[0m"

    # Background
    for i in {40..47}; do
        printf "\x1b[${i}m%03d " "$i"
    done
    echo -e "\x1b[0m"

    # Bright foreground
    for i in {90..97}; do
        printf "\x1b[${i}m%03d " "$i"
    done
    echo -e "\x1b[0m"
}

if test $subcmd = $CMD_LS; then
    get_tracked_files
elif test $subcmd = $CMD_COLORTEST; then
    codecolor_test
    echoe
    bytecolor_test
    echoe
    truecolor_test
elif test $subcmd = $CMD_SYNC; then
    if git pull; then
        symlink_tracked_files
        clean_orphaned_symlinks
    else
        echoe "Pull error"
    fi
elif test $subcmd = $CMD_ADD;  then
    for file in ${argv[@]:1}; do
	if ! add_tracked_file $file; then exit 1; fi
    done

    symlink_tracked_files

    commit_reminder
elif test $subcmd = $CMD_RM; then
    toRemove=${argv[@]:1}
    validRemoves=$(filter_untracked_files $toRemove)

    if ! test $? -eq 0; then
       exit 1;
    fi

    for file in $validRemoves; do
	if ! untrack_file $file; then exit 1; fi
    done

    commit_reminder
else
    echo "Commands: "
    for cmd in ${CMDS[@]}; do echo "    $cmd"; done
fi
